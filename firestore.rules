/**
 * @fileoverview Firestore Security Rules for DocuEase application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * documents, and tool usage records. Orders are stored in a root collection and
 * accessed by the user who created them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /subscriptions/{subscriptionId}: Stores subscription information.
 * - /users/{userId}/documents/{documentId}: Stores documents uploaded by the user.
 * - /users/{userId}/toolUsages/{toolUsageId}: Stores tool usage records for each user.
 * - /orders/{orderId}: Stores all user print delivery orders.
 *
 * Key Security Decisions:
 * - Users can only access their own user profiles, documents, and tool usage records.
 * - Orders can be queried by admins (not implemented here) or the user who created them.
 * - Listing all users or subscriptions is disallowed.
 *
 * Denormalization for Authorization:
 * - Orders denormalize the `userId` to allow querying for a user's own orders.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with matching id creates their profile.
     * @allow (get, update, delete) User with matching id accesses their profile.
     * @deny (create) User tries to create a profile with a mismatched id.
     * @deny (get, update, delete) User tries to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to subscription information.
     * @path /subscriptions/{subscriptionId}
     * @allow N/A No direct client access to subscriptions.
     * @deny All operations are denied.
     * @principle Prevents unauthorized access to subscription details.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to documents uploaded by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with matching id creates a document.
     * @allow (get, list, update, delete) User with matching id accesses their documents.
     * @deny (create) User tries to create a document with a mismatched id.
     * @deny (get, list, update, delete) User tries to access another user's documents.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tool usage records for each user.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (create) User with matching id creates a tool usage record.
     * @allow (get, list, update, delete) User with matching id accesses their tool usage records.
     * @deny (create) User tries to create a tool usage record with a mismatched id.
     * @deny (get, list, update, delete) User tries to access another user's tool usage records.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && exists(resource);
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user print delivery orders.
     * @path /orders/{orderId}
     * @allow (get, list, create, update, delete) User accesses their own orders.
     * @deny (get, list, create, update, delete) User tries to access another user's orders.
     * @principle Enforces that users can only manage their own orders.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOrderOwner() {
        return request.auth.uid == resource.data.userId;
      }

      function isExistingOrderOwner() {
        return isSignedIn() && exists(resource) && isOrderOwner();
      }

      allow get: if isExistingOrderOwner();
      allow list: if isSignedIn() && request.auth.uid == request.query.userId;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOrderOwner();
      allow delete: if isExistingOrderOwner();
    }
  }
}