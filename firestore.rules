/**
 * @fileOverview Firestore Security Rules for DocuEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, documents, and tool usage data.
 * Orders are stored in a root collection that support admin access patterns for order management.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /subscriptions/{subscriptionId}: Stores subscription information. Subscription id is also stored on user profile.
 * - /users/{userId}/documents/{documentId}: Stores user-uploaded documents.
 * - /users/{userId}/toolUsages/{toolUsageId}: Stores records of tool usage by users.
 * - /orders/{orderId}: Stores user orders with a 'userId' field for linking to the user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only access documents and tool usages associated with their user ID.
 * - Orders are stored in a top-level collection, and rules are designed to allow both user-specific access (via filtering) and potential admin access (not explicitly defined).
 *
 * Denormalization for Authorization:
 *  The `Document` and `ToolUsage` entities denormalize the `userId` into their respective documents, allowing simple ownership checks based on the path. The `Order` entity contains a `userId` field to link it to the user.
 *
 * Structural Segregation:
 *  User-specific data (documents, tool usages) are stored in user subcollections, providing a clear separation of concerns and simplified security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner of the profile.
     *   Example: request.auth.uid == 'user123'
     * @deny (get, create, update, delete, list) if the user is not the owner of the profile.
     *   Example: request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId) ;
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to subscription data.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) if true (public read)
     * @allow (create, update, delete, list) if false.
     * @principle Restricts write access to subscription data.
     */
    match /subscriptions/{subscriptionId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to documents uploaded by a user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, create, update, delete, list) if the user is the owner of the document.
     *   Example: request.auth.uid == 'user123'
     * @deny (get, create, update, delete, list) if the user is not the owner of the document.
     *   Example: request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to tool usage records for a user.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (get, create, update, delete, list) if the user is the owner of the tool usage record.
     *   Example: request.auth.uid == 'user123'
     * @deny (get, create, update, delete, list) if the user is not the owner of the tool usage record.
     *   Example: request.auth.uid != 'user123'
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user print delivery orders.
     * @path /orders/{orderId}
     * @allow (get, list) if the user is the owner of the order or the user is an admin.
     *   Example (User): request.auth.uid == resource.data.userId
     *   Example (Admin - Not Implemented): isAdmin()
     * @allow (create) if the user is signed in and the order's userId matches their own.
     * @allow (update, delete) if the user is the owner of the order and the order exists.
     * @deny (get, create, update, delete, list) if none of the above conditions are met.
     * @principle Enforces document ownership for writes, allows public read, and allows admin access (partially implemented).
     */
    match /orders/{orderId} {
      function isOwner(orderUserId) {
        return request.auth.uid == orderUserId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      // Allow read access if the user is the owner of the order or if the rules are adjusted to allow admin access
      allow get: if isOwner(resource.data.userId);
      // Allow list access with userId filter
      allow list: if isSignedIn();
      // Allow create if the user is signed in and the userId matches the auth uid
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Allow update and delete if the user is the owner and the document exists
      allow update: if isSignedIn() && isOwner(request.resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isOwner(request.resource.data.userId) && resource.data.userId == request.auth.uid;
    }
  }
}