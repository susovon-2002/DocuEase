
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow users to read and write their own user profile.
    // Admins can read/write any user profile.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Allow users to read their own subscription.
    // Admins can read any subscription.
    match /subscriptions/{subscriptionId} {
      allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionId == subscriptionId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      // Writes to subscriptions should be handled by a secure backend process (e.g., after payment).
      allow write: if false;
    }

    // Users can manage their own documents and tool usages.
    match /users/{userId}/{subcollection}/{documentId} {
      allow list, read, write, delete: if request.auth.uid == userId;
    }

    // Admins can manage all orders.
    // Users can create their own order and read orders where their userId matches.
    match /orders/{orderId} {
      allow read: if resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Authenticated users can create a pending payment document for themselves.
    // The document can be updated by a backend process (represented here by allowing admin writes for simplicity).
    match /pendingPayments/{paymentId} {
        allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
        allow read, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true || exists(/databases/$(database)/documents/pendingPayments/$(paymentId)) && resource.data.userId == request.auth.uid;
    }
  }
}
