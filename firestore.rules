/**
 * @fileOverview Firestore Security Rules for DocuEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, documents, and tool usages.
 * Orders are stored in a root collection with a `userId` field, allowing for both user-specific and admin access.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user.
 * - /subscriptions/{subscriptionId}: Subscription details.
 * - /users/{userId}/documents/{documentId}: Documents owned by the user.
 * - /users/{userId}/toolUsages/{toolUsageId}: Tool usage records for the user.
 * - /orders/{orderId}: Orders placed by users, with a `userId` field linking to the user.
 *
 * Key Security Decisions:
 * - Users can only access their own profile and associated data (documents, tool usages).
 * - Listing all users is disallowed.
 * - Orders are stored in a root collection for admin access, but individual users can query their own orders using the `userId` field.
 *
 * Denormalization for Authorization:
 * - The `orders` collection relies on the `userId` field within each document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isCreatingOwner(userId) {
          return request.auth.uid == userId && request.resource.data.id == request.auth.uid;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isCreatingOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Allows public read access to subscriptions, but restricts creation, updates, and deletion.
      * @path /subscriptions/{subscriptionId}
      */
    match /subscriptions/{subscriptionId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for documents.
     * @path /users/{userId}/documents/{documentId}
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for tool usage records.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows users to create, read, update and delete their own orders.
     * @path /orders/{orderId}
     */
    match /orders/{orderId} {
      function isOwner() {
        return request.auth != null && request.resource.data.userId == request.auth.uid;
      }
      function isExistingOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }

      allow get: if isExistingOwner();
      allow list: if request.auth != null && request.query.get("userId") == request.auth.uid;

      allow create: if isOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }
  }
}