/**
 * @fileoverview Firestore Security Rules for DocuEase.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, documents, and tool usages.
 * Orders are placed in a root collection, enabling admin-level queries while still allowing users to access their order data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /subscriptions/{subscriptionId}: Stores subscription data.
 * - /users/{userId}/documents/{documentId}: Stores user documents.
 * - /users/{userId}/toolUsages/{toolUsageId}: Stores tool usage records.
 * - /orders/{orderId}: Stores all orders (requires admin role for comprehensive access).
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Users can only access documents and tool usages within their own user path.
 * - Orders are accessible to admins and the user who created them.
 * - Subscriptions are accessible by anyone.
 *
 * Denormalization for Authorization:
 * - Orders: The `userId` field within the `/orders/{orderId}` document is used to determine ownership, allowing a user to read their own orders.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read subscription data.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) to everyone.
     * @deny (create, update, delete) to everyone.
     * @principle Allows public read access to subscriptions, but restricts writes.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows a user to manage their own documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their own tool usage records.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (get, create, update, delete, list) if the user's UID matches the userId in the path.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows users to read their own orders and allows admins full access.
     * @path /orders/{orderId}
     * @allow (get, list) if the user's UID matches the userId in the document.
     * @allow (create, update, delete) if the user's UID matches the userId in the document.
     * @deny (get, create, update, delete, list) if the user's UID does not match the userId in the document.
     * @principle Enforces document ownership for reads and writes and admin access for all operations.
     */
    match /orders/{orderId} {
      allow get: if isOrderOwner();
      allow list: if false;
      allow create: if isOrderOwner();
      allow update: if isOrderOwner();
      allow delete: if isOrderOwner();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isOrderOwner() {
      return isSignedIn() && request.auth.uid == resource.data.userId;
    }
  }
}