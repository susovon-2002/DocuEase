rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read and write their own user document
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Admins can read any user's document
      allow get, list: if request.auth != null && isAdmin();
    }
    
    // Admins can create users (useful for seeding, etc.)
    match /users/{userId} {
        allow create: if request.auth != null && isAdmin();
    }

    // Subscriptions can be read by the user who owns it (via user doc) or an admin
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionId == subscriptionId || isAdmin());
    }

    // Users can manage their own subcollections
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // --- PAYMENT RULES ---
    
    // Any authenticated user can create a PENDING payment record for themselves.
    // They can also update it (for polling) if they are the owner.
    match /pendingPayments/{paymentId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // --- ORDER RULES ---

    // Users can read their own orders. Admins can read all orders.
    match /orders/{orderId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      // Admins can update any order (e.g., to change status)
      allow update: if request.auth != null && isAdmin();
    }
  }
}
