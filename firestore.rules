rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to a user's profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update, delete) if the document doesn't exist or the user is not the owner.
     * @principle Enforces document ownership for all operations on a user's profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.keys().hasAll(['userId']) && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to a subscription.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (create) if the subscriptionId does not match the authenticated user's ID.
     * @deny (update, delete) if the document doesn't exist or the user is not the owner.
     * @principle Enforces document ownership for all operations on a subscription.
     */
    match /subscriptions/{subscriptionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      // Assuming subscriptionId is only ever written by backend, and never directly modified by users.
      // If users are meant to create subscriptions, an auth check is needed.
      allow get: if true; 
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to a user's documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update, delete) if the document doesn't exist or the user is not the owner.
     * @principle Enforces document ownership for all operations on a user's documents.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to a user's tool usages.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (get, create, update, delete, list) if the user is the owner.
     * @deny (create) if the userId does not match the authenticated user's ID.
     * @deny (update, delete) if the document doesn't exist or the user is not the owner.
     * @principle Enforces document ownership for all operations on a user's tool usages.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Grants access to orders.
     * @path /orders/{orderId}
     * @allow (get, list) if true.
     * @allow (create) if the user is signed in and the userId matches the authenticated user's ID.
     * @allow (update, delete) if the user is the owner and the document exists.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.keys().hasAll(['userId']) && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.resource.data.keys().hasAll(['userId']) && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.resource.data.keys().hasAll(['userId']) && request.auth.uid == resource.data.userId;
    }
  }
}