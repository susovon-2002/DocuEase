/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for the DocuEase application.
 * All data is nested under /users/{userId}, ensuring that users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: User profiles, accessible only by the user.
 * - /subscriptions/{subscriptionId}: Subscription data, accessible by anyone.
 * - /users/{userId}/documents/{documentId}: Documents owned by the user.
 * - /users/{userId}/toolUsages/{toolUsageId}: Tool usage records for the user.
 * - /users/{userId}/orders/{orderId}: Orders placed by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own profiles and associated data.
 * - Listing of all users is disallowed.
 * - Flexible schema validation to support rapid prototyping.
 *
 * Denormalization for Authorization:
 *  - The path /users/{userId} automatically provides the userId for authorization, without needing
 *    to read the document. The same applies to subcollections under /users/{userId}.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare with the request's authentication UID.
     * @return {bool} True if the user ID matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the existing resource.
     * @param {string} userId - The user ID to compare with the resource's data.
     * @return {bool} True if the user ID matches the authenticated user's UID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user123'
     * @deny (create) User with ID 'user123' tries to create a profile for 'user456'.
     *   request.auth.uid: 'user123'
     *   request.resource.data.id: 'user456'
     * @allow (get) User with ID 'user123' reads their own profile.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read profile of 'user456'.
     *   request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates their own profile.
     *   request.auth.uid: 'user123'
     *   resource.data.id: 'user123'
     *   request.resource.data.id: 'user123'
     * @deny (update) User with ID 'user123' tries to update the profile of 'user456'.
     *   request.auth.uid: 'user123'
     *   resource.data.id: 'user456'
     *   request.resource.data.id: 'user456'
     * @deny (delete) User with ID 'user123' tries to delete the profile of 'user456'.
     *   request.auth.uid: 'user123'
     *   resource.data.id: 'user456'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /subscriptions/{subscriptionId} collection.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) Any user can get subscription information.
     *   request.auth.uid: 'user123'
     * @allow (list) Any user can list subscriptions.
     *   request.auth.uid: 'user123'
     * @deny (create) No one can create subscriptions.
     *   request.auth.uid: 'user123'
     * @deny (update) No one can update subscriptions.
     *   request.auth.uid: 'user123'
     * @deny (delete) No one can delete subscriptions.
     *   request.auth.uid: 'user123'
     */
    match /subscriptions/{subscriptionId} {
        allow get, list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rule for /users/{userId}/documents/{documentId} collection.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with ID 'user123' creates a document in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create a document in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @allow (get) User with ID 'user123' reads a document in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read a document in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates a document in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (update) User with ID 'user123' tries to update a document in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @deny (delete) User with ID 'user123' tries to delete a document in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Rule for /users/{userId}/toolUsages/{toolUsageId} collection.
      * @path /users/{userId}/toolUsages/{toolUsageId}
      * @allow (create) User with ID 'user123' creates a toolUsage in their own directory.
      *   request.auth.uid: 'user123'
      * @deny (create) User with ID 'user123' tries to create a toolUsage in 'user456's directory.
      *   request.auth.uid: 'user123'
      * @allow (get) User with ID 'user123' reads a toolUsage in their own directory.
      *   request.auth.uid: 'user123'
      * @deny (get) User with ID 'user123' tries to read a toolUsage in 'user456's directory.
      *   request.auth.uid: 'user123'
      * @allow (update) User with ID 'user123' updates a toolUsage in their own directory.
      *   request.auth.uid: 'user123'
      * @deny (update) User with ID 'user123' tries to update a toolUsage in 'user456's directory.
      *   request.auth.uid: 'user123'
      * @deny (delete) User with ID 'user123' tries to delete a toolUsage in 'user456's directory.
      *   request.auth.uid: 'user123'
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/toolUsages/{toolUsageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for /users/{userId}/orders/{orderId} collection.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) User with ID 'user123' creates an order in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' tries to create an order in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @allow (get) User with ID 'user123' reads an order in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (get) User with ID 'user123' tries to read an order in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @allow (update) User with ID 'user123' updates an order in their own directory.
     *   request.auth.uid: 'user123'
     * @deny (update) User with ID 'user123' tries to update an order in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @deny (delete) User with ID 'user123' tries to delete an order in 'user456's directory.
     *   request.auth.uid: 'user123'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}