rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user profile information, restricted to the user themselves.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access their own profile.
     * @allow (create) A new user can create their own profile if the document ID matches their UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to subscription information.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) Anyone can read the subscription.
     * @deny (create, update, delete) No one can create, update, or delete subscriptions.
     * @principle Restricts write access to subscriptions.
     */
    match /subscriptions/{subscriptionId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows access to documents uploaded by the user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, update, delete) User with matching {userId} can access their own documents.
     * @allow (create) User with matching {userId} can create documents under their user ID.
     * @deny (get, update, delete) User cannot access another user's documents.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to tool usage records for each user.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (get, update, delete) User with matching {userId} can access their own tool usage records.
     * @allow (create) User with matching {userId} can create tool usage records under their user ID.
     * @deny (get, update, delete) User cannot access another user's tool usage records.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }


      allow get: if isExistingOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows access to user print delivery orders.
     * @path /orders/{orderId}
     * @allow (get, list) Anyone can get or list all orders.
     * @allow (create) Any authenticated user can create an order
     * @deny (update, delete) No one can update or delete orders.
     * @principle Allows public read access but restricts write access.
     */
    match /orders/{orderId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update, delete: if false;
    }
  }
}