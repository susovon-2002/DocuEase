rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     *          Request: auth.uid = 'user123'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     *          Request: auth.uid = 'user123'
     * @deny  (get, update, delete) User with ID 'user456' cannot access user 'user123' profile.
     *          Request: auth.uid = 'user456'
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for subscription data.
     * @path /subscriptions/{subscriptionId}
     * @allow (get) Anyone can read subscription data
     *          Request: None
     * @deny (create, update, delete) Nobody can modify subscription data.
     *          Request: None
     * @principle Restricts creation, modification, and deletion of Subscriptions
     */
    match /subscriptions/{subscriptionId} {
        allow get: if true;
        allow list: if false; // Listing subscriptions is disabled for now
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Enforces access control for documents stored under a specific user.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) User with ID 'user123' can create a document under their own user ID.
     *          Request: auth.uid = 'user123', path = '/users/user123/documents/doc1'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own documents.
     *          Request: auth.uid = 'user123', path = '/users/user123/documents/doc1'
     * @deny  (get, update, delete) User with ID 'user456' cannot access documents under user 'user123'.
     *          Request: auth.uid = 'user456', path = '/users/user123/documents/doc1'
     * @principle Enforces document ownership and restricts access to a user's own documents.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for tool usage records stored under a specific user.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (create) User with ID 'user123' can create a tool usage record under their own user ID.
     *          Request: auth.uid = 'user123', path = '/users/user123/toolUsages/tool1'
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own tool usage records.
     *          Request: auth.uid = 'user123', path = '/users/user123/toolUsages/tool1'
     * @deny  (get, update, delete) User with ID 'user456' cannot access tool usage records under user 'user123'.
     *          Request: auth.uid = 'user456', path = '/users/user123/toolUsages/tool1'
     * @principle Enforces document ownership and restricts access to a user's own tool usage records.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for orders.
     * @path /orders/{orderId}
     * @allow (create) Any authenticated user can create an order.
     *          Request: auth.uid != null
     * @allow (get, update, delete) Only the user who placed the order can access or modify it.
     *          Request: auth.uid = order.userId
     * @deny  (get, update, delete) Another user cannot access or modify an order.
     *          Request: auth.uid != order.userId
     * @principle Enforces user-specific access to orders based on the userId field.
     */
    match /orders/{orderId} {
      allow get: if request.auth != null && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}