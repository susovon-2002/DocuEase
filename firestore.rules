
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read and update their own profile.
    // Admins can read/write any user profile.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null;
    }

    // Subscriptions can only be read by the user who owns them (via user profile) or admins.
    // Writes are handled by secure backend logic (e.g., Cloud Functions).
    match /subscriptions/{subscriptionId} {
      allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                   (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.subscriptionId == subscriptionId || isAdmin());
      allow write: if false; // Disallow client-side writes
    }

    // Users can manage their own documents. Admins can read any document.
    match /users/{userId}/documents/{documentId} {
      allow read, write, delete: if isOwner(userId);
      allow list: if isOwner(userId);
    }
    
    // Users can manage their own tool usages. Admins can read any usage record.
    match /users/{userId}/toolUsages/{toolUsageId} {
        allow read, write, delete: if isOwner(userId);
        allow list: if isOwner(userId);
    }

    // Admins can manage all orders. Users can only read/create their own orders.
    match /orders/{orderId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow list: if isAdmin() || (request.auth != null && request.query.where.to_list()[0][2] == request.auth.uid);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }
    
    // Any authenticated user can create a pending payment document for themselves.
    // They can also update it (which happens during the payment flow).
    match /pendingPayments/{paymentId} {
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow read, update: if isOwner(resource.data.userId);
      allow delete: if false; // Should be cleaned up by a backend process
    }
  }
}
