/**
 * @file Firebase Security Rules for DocuEase Application
 *
 * @description This ruleset enforces a strict user-ownership model for most data, while allowing administrative access to orders.
 * All data is nested under `/users/{userId}` or associated with a `userId` field.
 *
 * Data Structure:
 * - `/users/{userId}`: User profile information, accessible only to the user themselves.
 * - `/subscriptions/{subscriptionId}`: Subscription details, accessible to anyone. The subscription `id` is also stored on user profile as `subscriptionId`.
 * - `/users/{userId}/documents/{documentId}`: Documents owned by a user, accessible only to that user.
 * - `/users/{userId}/toolUsages/{toolUsageId}`: Tool usage records for a user, accessible only to that user.
 * - `/orders/{orderId}`: Orders placed by users. Accessible to admins and the user who created the order (via the `userId` field).
 *
 * Key Security Decisions:
 * - Users can only access their own profile data and related resources (documents, tool usages).
 * - Listing of all users is disallowed.
 * - Orders can be listed and retrieved by admins; users can only list/retrieve their own orders by querying the collection by `userId`.
 * - Subscriptions are publicly readable by default.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the request is made by the user with ID {userId}.
     * @allow (create) if the authenticated user's ID matches {userId}.
     * @deny (get, update, delete) if the request is made by a different user.
     * @deny (create) if the authenticated user's ID does not match {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Subscription details are publicly readable.
     * @path /subscriptions/{subscriptionId}
     * @allow (get, list) Public access to subscription details.
     * @deny (create, update, delete) No one can create, update, or delete subscriptions via the client.
     * @principle Public read access with restricted writes.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure access to documents uploaded by users. Only the owner can read or write these documents.
     * @path /users/{userId}/documents/{documentId}
     * @allow (get, update, delete) if the request is made by the user with ID {userId}.
     * @allow (create) if the authenticated user's ID matches {userId}.
     * @deny (get, update, delete) if the request is made by a different user.
     * @deny (create) if the authenticated user's ID does not match {userId}.
     * @principle Enforces document ownership and path-based authorization.
     */
    match /users/{userId}/documents/{documentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to tool usage records. Only the owner (user) can read or write these records.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (get, update, delete) if the request is made by the user with ID {userId}.
     * @allow (create) if the authenticated user's ID matches {userId}.
     * @deny (get, update, delete) if the request is made by a different user.
     * @deny (create) if the authenticated user's ID does not match {userId}.
     * @principle Enforces document ownership and path-based authorization.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to orders. Admins can read all orders. Users can only read their own orders.
     * @path /orders/{orderId}
     * @allow (get, list) if the request is made by an admin or the user who placed the order.
     * @allow (create, update, delete) if the request is made by an admin.
     * @deny (create, update, delete) if the request is made by a regular user.
     * @principle Allows admin access to all orders while restricting user access to their own orders.
     */
    match /orders/{orderId} {
      function isAdmin() {
        return request.auth != null && request.auth.token.admin == true;
      }

      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}