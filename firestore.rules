/**
 * @file Firestore Security Rules for DocuEase Application
 * @description This ruleset enforces a strict user-ownership model for user profiles, documents, and tool usage records.
 * Orders are stored in a separate top-level collection, with access controlled based on user ID and potential admin roles.
 *
 * @dataStructure
 * - /users/{userId}: Stores user profile information.
 * - /subscriptions/{subscriptionId}: Stores subscription information. Subscription `id` is also stored on user profile as `subscriptionId`.
 * - /users/{userId}/documents/{documentId}: Stores documents uploaded by the user.
 * - /users/{userId}/toolUsages/{toolUsageId}: Stores tool usage records for each user.
 * - /orders/{orderId}: Stores all user print delivery orders in a single collection.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile data.
 * - Documents and tool usage records are private to the owning user.
 * - Orders are accessible to the owning user and, potentially, administrators.
 * - Listing of all users is explicitly denied.
 *
 * @denormalizationForAuthorization
 * - Orders include a `userId` field to enable filtering by user.
 *
 * @structuralSegregation
 * - Orders are stored in a separate top-level collection to support admin access without compromising user privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and if the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource.data.id == request.auth.uid;
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the profile of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /subscriptions/{subscriptionId} collection.
     * @path /subscriptions/{subscriptionId}
     * @allow (create) - Anyone can create a subscription.
     * @allow (get) - Anyone can read a subscription.
     * @allow (update) - Anyone can update a subscription.
     * @allow (delete) - Anyone can delete a subscription.
     * @deny (none) - No requests are explicitly denied as of yet.
     * @principle No ownership constraints enforced.
     */
    match /subscriptions/{subscriptionId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Rule for the /users/{userId}/documents/{documentId} collection.
     * @path /users/{userId}/documents/{documentId}
     * @allow (create) - User with ID 'user123' can create a document in their documents collection if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read a document in their documents collection if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update a document in their documents collection if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete a document in their documents collection if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a document in the documents collection of 'user123'.
     * @deny (get) - User with ID 'user456' cannot read a document in the documents collection of 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/documents/{documentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /users/{userId}/toolUsages/{toolUsageId} collection.
     * @path /users/{userId}/toolUsages/{toolUsageId}
     * @allow (create) - User with ID 'user123' can create a tool usage record in their tool usages collection if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read a tool usage record in their tool usages collection if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update a tool usage record in their tool usages collection if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete a tool usage record in their tool usages collection if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create a tool usage record in the tool usages collection of 'user123'.
     * @deny (get) - User with ID 'user456' cannot read a tool usage record in the tool usages collection of 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/toolUsages/{toolUsageId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rule for the /orders/{orderId} collection.
     * @path /orders/{orderId}
     * @allow (create) - User with ID 'user123' can create an order with their ID if authenticated as 'user123'.
     * @allow (get) - User with ID 'user123' can read their order if authenticated as 'user123'.
     * @allow (update) - User with ID 'user123' can update their order if authenticated as 'user123'.
     * @allow (delete) - User with ID 'user123' can delete their order if authenticated as 'user123'.
     * @deny (create) - User with ID 'user456' cannot create an order with the ID of 'user123'.
     * @deny (get) - User with ID 'user456' cannot read the order with the ID of 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /orders/{orderId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }
  }
}